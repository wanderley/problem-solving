:PROPERTIES:
:ID:       47D88994-CD09-41C5-A3BA-9EDF2B9AB80E
:ROAM_REFS: https://leetcode.com/problems/minimum-fuel-cost-to-report-to-the-capital/
:END:
#+TITLE: Leetcode: 2477. Minimum Fuel Cost to Report to the Capital
#+ROAM_REFS: https://leetcode.com/problems/minimum-fuel-cost-to-report-to-the-capital/
#+LEETCODE_LEVEL: Medium
#+ANKI_DECK: Problem Solving
#+ANKI_CARD_ID: 1670217268124

* Patterns

- [[id:63791EB8-1E2A-41D3-AFCE-1511EFAE55AC][Pattern: Tree Problem]].

- [[id:45D8FD21-992F-4073-8EC6-7695FAA0E3AB][Pattern: Optimization problem to find minimum/maximum number of X to cover Y]].

- [[id:63F5032C-75D7-4D9E-A558-914218193D0B][Pattern: Problem allows making optimal local decisions]].

* Prompts

- [[id:1CA3366B-D045-4BF4-9E39-DFA5131EF937][Can we solve the problem using a greedy approach?]]

* Solution

Let's start with a definition for leaf and parent cities.  A leaf city is a city with only one connection to an other city which we call parent city.  By this definition, the representative in a leaf city has only one option to go to the capital which is driving first to their parent cities and then continuing the trip to the capital.

The solution consists on executing the following reduction to the input tree.  We move representative from leaf cities to their parent cities.  Then, we remove the leaf cities from the tree what creates new leaf cities since some parent cities will have only one connection remaining.  If there is only one city left, it must be the capital and the problem is solved.  Otherwise, we execute the same process again.  While we move the representative, we keep track of the accumulated cost so far and the number of representatives that are traveling to the capital.  Since we can take an local optimal decision to move representatives from leaf to parent cities, this is a [[id:FFC75108-C74E-44B1-9B60-B3A22B15E617][Greedy algorithm]].  And you can implement it using a [[id:212DBFC3-FE3C-493E-86A6-42FF3F82CD53][Depth-first search]] with time and space complexity of $O(n)$.

#+begin_src python
  class Solution:
      def minimumFuelCost(self, roads: List[List[int]], seats: int) -> int:
          N = len(roads) + 1
          A = [[] for _ in range(N)]
          for u, v in roads:
              A[u].append(v)
              A[v].append(u)

          def dfs(u, p):
              total, count = 0, 1
              for v in A[u]:
                  if v != p:
                      ecost, ecount = dfs(v, u)
                      total += ecost
                      count += ecount
              if u == 0:
                  return total
              return total + ceil(count / seats), count

          return dfs(0, None)
#+end_src

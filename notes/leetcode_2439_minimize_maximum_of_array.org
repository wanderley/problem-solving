:PROPERTIES:
:ID:       11EF5682-748D-4F02-BB56-96302800D815
:ROAM_REFS: https://leetcode.com/problems/minimize-maximum-of-array/
:END:
#+TITLE: Leetcode: 2439. Minimize Maximum of Array
#+ROAM_REFS: https://leetcode.com/problems/minimize-maximum-of-array/
#+LEETCODE_LEVEL: Medium
#+ANKI_DECK: Problem Solving
#+ANKI_CARD_ID: 1665956259039

* Understand the problem

Given an array of integers which you can do operations to transfer 1 from any positive number to its right-neighbor, compute the minimum possible values after performing any number of operations.

** Useful prompts

- [[id:60DEC3A8-810C-41E3-96E3-98145F4AAC3F][Can we state the problem as a searching problem?]]

* Devise a plan

For a given input, suppose that we know the answer and it is $x$ ([[id:B39B7723-9DCB-4C18-BE7D-51086F1F2A81][Pattern: Search & Validate]]).  We can go from left to right applying operations to make each number less than $x$.  For example, $a=[3,2,9]$ and $x=5$. We can apply the following operations: $[3,6,5] \rightarrow [4,5,5]$.  After the first operation, we changed $a[2]$ from $9$ to $5$ what left $4$ remained which was added to $a[1]$.  When the remainder is negative, we can set it to zero, since there is no way to transfer values from right to left.  On the end, if the remainder is zero, we know that $x$ was a valid answer.  If $x$ is an optimal answer, then $x+1$ is also a valid answer and $x-1$ is an invalid answer.  So, a value $y$ between $0$ and $\sum a[i]$, we have that it is invalid if $y<x$ and valid otherwise.  We can use this property and use a [[id:1217FC3D-A9F9-49EC-BA5D-A68E50338DBD][Binary Search]] to find the optimal value $x$.  Time complexity is $O(n \times \log \sum a[i])$ and space is $O(1)$.

** Carry out the plan

#+begin_src python
  class Solution:
      def minimizeArrayValue(self, nums: List[int]) -> int:
          N = len(nums)

          def valid(x):
              r = 0
              for i in range(N - 1, -1, -1):
                  nr = (nums[i] + r) - x
                  if nr < 0:
                      r = 0
                  else:
                      r = nr
              return r == 0

          start = 0
          end = sum(nums)
          ans = None
          while start <= end:
              mid = start + (end - start) // 2
              if valid(mid):
                  ans = mid
                  end = mid - 1
              else:
                  start = mid + 1

          return ans
#+end_src

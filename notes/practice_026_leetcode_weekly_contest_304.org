:PROPERTIES:
:ID:       2B171B32-D292-43CD-9A4F-52D5278E7C1B
:END:
#+TITLE: Practice #026: Leetcode Weekly Contest 304

* Leetcode: 2357. Make Array Zero by Subtracting Equal Amounts
:PROPERTIES:
:ID:       7D7E8D8E-02A2-4BD1-86D8-3107C9CEF893
:END:
[[https://leetcode.com/problems/make-array-zero-by-subtracting-equal-amounts/][Problem Statement]]

#+begin_src python
  from typing import List


  class Solution:
      def minimumOperations(self, nums: List[int]) -> int:
          return len(set(nums) - set([0]))


  assert Solution().minimumOperations([1, 5, 0, 3, 5]) == 3
  assert Solution().minimumOperations([0]) == 0
#+end_src

* Leetcode: 2358. Maximum Number of Groups Entering a Competition
:PROPERTIES:
:ID:       CEA22E74-7315-4278-ACC2-A6BC1557A1DB
:END:
[[https://leetcode.com/problems/maximum-number-of-groups-entering-a-competition/][Problem Statement]]

- I saw that the numbers didn't matter, but decided to code the simulation anyways.  It turned out that the code is simpler if we discard the input.

Linear solution:
#+begin_src python
  from typing import List


  class Solution:
      def maximumGroups(self, grades: List[int]) -> int:
          N = len(grades)
          ac = 0
          for k in range(1, N + 1):
              if ac + k > N:
                  return k - 1
              if ac + k == N:
                  return k
              ac += k
              k += 1

          return k


  assert Solution().maximumGroups([10, 6, 12, 7, 3, 5]) == 3
  assert Solution().maximumGroups([8, 8]) == 1
#+end_src

[[id:1217FC3D-A9F9-49EC-BA5D-A68E50338DBD][Binary Search]] solution:
#+begin_src python
  from typing import List


  class Solution:
      def maximumGroups(self, grades: List[int]) -> int:
          N = len(grades)
          s = 1
          e = N
          while s <= e:
              m = s + (e - s) // 2
              c = (m * (m + 1)) // 2
              if c == N:
                  return m
              elif c < N:
                  s = m + 1
              else:
                  e = m - 1
          return s - 1


  assert Solution().maximumGroups([10, 6, 12, 7, 3, 5]) == 3
  assert Solution().maximumGroups([8, 8]) == 1
#+end_src

* Leetcode: 2359. Find Closest Node to Given Two Nodes
:PROPERTIES:
:ID:       924A5DFF-2F4A-4A2D-BDF1-826F9F110FBB
:END:
[[https://leetcode.com/problems/find-closest-node-to-given-two-nodes/][Problem Statement]]

#+begin_src python
  from typing import List


  class Solution:
      def closestMeetingNode(self, edges: List[int], node1: int, node2: int) -> int:
          N = len(edges)

          d1 = [None] * N
          d1[node1] = 0
          u = node1
          while edges[u] != -1 and d1[edges[u]] is None:
              d1[edges[u]] = d1[u] + 1
              u = edges[u]

          d2 = [None] * N
          d2[node2] = 0
          u = node2
          while edges[u] != -1 and d2[edges[u]] is None:
              d2[edges[u]] = d2[u] + 1
              u = edges[u]

          ans = None
          for i, a, b in zip(range(N), d1, d2):
              if a is None or b is None:
                  continue
              if ans is None or max(d1[ans], d2[ans]) > max(a, b):
                  ans = i
          return -1 if ans is None else ans


  assert Solution().closestMeetingNode([2, 2, 3, -1], 0, 1) == 2
  assert Solution().closestMeetingNode([1, 2, -1], 0, 2) == 2
#+end_src

* Leetcode: 2360. Longest Cycle in a Graph
:PROPERTIES:
:ID:       04164A2E-F825-47BF-B978-E168381F6922
:END:
[[https://leetcode.com/problems/longest-cycle-in-a-graph/][Problem Statement]]

#+begin_src python
  from typing import List


  class Solution:
      def longestCycle(self, edges: List[int]) -> int:
          N = len(edges)

          in_cnt = [0] * N
          for u, v in enumerate(edges):
              if v == -1:
                  continue
              in_cnt[v] += 1

          prunes = [u for u in range(N) if in_cnt[u] == 0]
          vis = [False] * N
          for u in prunes:
              vis[u] = True
              v = edges[u]
              if v == -1:
                  continue
              in_cnt[v] -= 1
              if in_cnt[v] == 0:
                  prunes.append(v)

          ans = -1
          for u in range(N):
              cnt = 0
              while not vis[u]:
                  vis[u] = True
                  u = edges[u]
                  cnt += 1
                  ans = max(ans, cnt)
          return ans


  assert Solution().longestCycle([3, 3, 4, 2, 3]) == 3
  assert Solution().longestCycle([2, -1, 3, 1]) == -1
#+end_src

:PROPERTIES:
:ID:       A65AAAF2-0F96-47F8-9A90-8F40324C00D3
:END:
#+TITLE: Leetcode: 588. Design In-Memory File System
#+ANKI_DECK: Problem Solving
#+ANKI_CARD_ID: 1661446033980
#+ROAM_REFS: https://leetcode.com/problems/design-in-memory-file-system/

* Understand the problem

Given a list of path where some are directories and other are files.  Implement an efficient data structure that allows easily access to each directory to save files and list its content.

** Useful prompts

- [[id:69D68202-BF1A-4D72-A0EC-DDCBAF112500][Can we break-down the problem in small and easily to solve parts?]]

- [[id:6DEEDEC1-DF98-4030-9730-54CCBC23385C][Can we answer efficiently queries with one or more data-structures?]]

* Devise a plan

Use [[id:5BC30FCA-3402-4DA7-89D9-7661FEBDA3A7][Trie]] to represent the directory and file paths.  Time complexity is $O(p)$ to find a node (for ~mkdir~, ~write~ and ~read~) where $p$ is the length of the path, $O(p + P)$ for ~ls~ where the $P$ is the sum of length of all nodes in a sub-path.

** Carry out the plan

#+begin_src python
  class FileSystem:

      def __init__(self):
          self.root = {}

      def ls(self, path: str) -> List[str]:
          node = self.node(path)
          if "__content__" in node:
              return [path.split("/")[-1]]
          return list(sorted(node.keys()))

      def mkdir(self, path: str) -> None:
          self.node(path)

      def addContentToFile(self, filePath: str, content: str) -> None:
          node = self.node(filePath)
          node["__content__"] = node.get("__content__", "") + content

      def readContentFromFile(self, filePath: str) -> str:
          return self.node(filePath).get("__content__", "")

      def node(self, path):
          if path == "/":
              return self.root
          node = self.root
          for p in path.split("/")[1:]:
              node = node.setdefault(p, {})
          return node


  # Your FileSystem object will be instantiated and called as such:
  # obj = FileSystem()
  # param_1 = obj.ls(path)
  # obj.mkdir(path)
  # obj.addContentToFile(filePath,content)
  # param_4 = obj.readContentFromFile(filePath)
#+end_src

:PROPERTIES:
:ID:       3E6C3C54-F5AD-44FE-8BDE-AC52E0D3A01E
:END:
#+TITLE: Leetcode: 1504. Count Submatrices With All Ones

A solution $O(m^2 \times n^2)$ won't pass the time limit, but one $O(m \times n^2)$ would pass.  How does such solution looks like?  We have to iterating only once on each line and for each of those, we can do two nested loops for each column.  In other words, we can fix the base of the submatrices and check if they are valid for all possible left and right side.  Be $k, i$ and $k$ the bottom row, the left column and the right column respectively.  The number of submatrices filled with zero will be $\max_{i \leq c \le j}_{} height(k, c)$, where $height(k, c)$ is the number of ones starting on $(k, c)$ to the top of the matrix.  You can compute $height$ while processing each row from the top to the bottom of the matrix.  Time complexity is $O(m \times n^2)$.

#+begin_src python
  from typing import List


  class Solution:
      def numSubmat(self, mat: List[List[int]]) -> int:
          n = len(mat)
          m = len(mat[0])

          height = [0] * m
          ans = 0
          for r in range(n):
              for j in range(m):
                  if mat[r][j] == 1:
                      height[j] += 1
                  else:
                      height[j] = 0
              for s in range(m):
                  max_height = height[s]
                  for e in range(s, m, 1):
                      max_height = min(max_height, height[e])
                      ans += max_height
          return ans


  assert Solution().numSubmat([[1, 0, 1], [1, 1, 0], [1, 1, 0]]) == 13
  assert Solution().numSubmat([[0, 1, 1, 0], [0, 1, 1, 1], [1, 1, 1, 0]]) == 24
#+end_src

* TODO Implement solution $O(m \times n^2)$

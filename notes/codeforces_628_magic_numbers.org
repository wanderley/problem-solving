:PROPERTIES:
:ID:       4594684F-6F70-4E9E-852B-977B6CBE9B94
:ROAM_REFS: https://codeforces.com/contest/628/problem/D
:END:
#+TITLE: Codeforces: 628. Magic Numbers

Brute force won't work because it would require iterating over $10^{2000}$ numbers in order to count the d-magic number.  Be $k$ the number of digits that need to be generated.

Suppose that $i$ digits ($a_1, a_2, ..., a_i$ where $a_1$ is the left-most digit of the generated number) were already generated.  We know that if $i=k$, $\left(a_1\times 10^{k}+a_2\times 10^{k-1}+...+a_k\times 10^{0}) \mod m = 0$, $a_o \neq d$ for $o=1,3,5,\dots$ and $a_e = d$ for $e=2,4,\dots$ then the generated number is a d-magic number and should be counted.  From [[id:D67C891B-7BF8-46AA-BC78-E88F9A14246D][Horner's rule]], we know that

\begin{align*}
  a_1\times 10^{k} & +a_2\times 10^{k-1}+...+a_k\times 10^{0} \\
  &= a_k + 10 \times\left(a_{k-1} + 10 \times \left(a_{k-2} + 10 \times \left(\dots\right)\right)\right).
\end{align*}

As $x + y \mod m = \big(\left(x \mod m\right) + \left(y \mod m\right)\big) \mod m$, we can compute the modulo of the generated number as each digit is generated.  This means that we don't need to store the generated digits, but make sure that the generated number is a d-magic number and after the last digit generated the rest of division by $m$ is zero.

The following recursion uses this idea, but doesn't pass to the judge due a limit of recursion calls.  Besides that, I wrote this code without taking an important restriction in the problem.  The numbers $a$ and $b$ have same number of digits while $a<=b$.  This restriction would simplify a lot the code by removing the logic to determine if a given index is or is not even.  I will leave it here since the code end up to be interesting.

#+begin_src python :exports none
  from functools import cache

  MOD = 10**9 + 7


  def is_magic(n, d):
      digits = list(map(int, str(n)))
      for i, v in enumerate(digits):
          if (i + 1) % 2 == 0 and v != d:
              return False
          if (i + 1) % 2 == 1 and v == d:
              return False
      return True


  def naive(m, d, a, b):
      return len([i for i in range(a, b + 1) if i % m == 0 and is_magic(i, d)])


  def solve(a, m, d):
      digits = list(map(int, str(a)))
      ndigits = len(digits)

      @cache
      def rec(i, smaller, first_digit, even, mod):
          if i == ndigits:
              return 1 if mod == 0 else 0

          ret = 0
          for c in range(10 if smaller else digits[i] + 1):
              if even and c != d:
                  continue
              if not even and c == d:
                  continue

              new_first_digit = False if not first_digit else c == 0
              ret += (
                  rec(
                      i + 1,
                      smaller or c < digits[i],
                      new_first_digit,
                      not even if not new_first_digit else False,
                      (mod * 10 + c) % m,
                  )
                  % MOD
              )
          return ret

      return rec(0, False, True, False, 0)


  def count(m, d, a, b):
      return (solve(b, m, d) - solve(a - 1, m, d) + MOD) % MOD


  assert count(2, 6, 10, 99) == naive(2, 6, 10, 99) == 8
  assert count(2, 0, 1, 9) == naive(2, 0, 1, 9) == 4
  assert count(19, 7, 1000, 9999) == naive(19, 7, 1000, 9999) == 6

  if __name__ == "__main__":
      m, d = list(map(int, input().split()))
      a = int(input())
      b = int(input())
      print(count(m, d, a, b))
#+end_src

To avoid problem with recursion and memory limit, the solution was implemented in C++ as follow.

#+include: ../codeforces/628.cpp src cpp

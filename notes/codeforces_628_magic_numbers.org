:PROPERTIES:
:ID:       4594684F-6F70-4E9E-852B-977B6CBE9B94
:ROAM_REFS: https://codeforces.com/contest/628/problem/D
:END:
#+TITLE: Codeforces: 628. Magic Numbers

Not passing due call stack limit.

Included file
#+include: ./codeforces_628_magic_numbers.py src python

Rest of document
#+begin_src python :exports
  from functools import lru_cache

  MOD = 10**9 + 7


  def is_magic(n, d):
      digits = list(map(int, str(n)))
      for i, v in enumerate(digits):
          if (i + 1) % 2 == 0 and v != d:
              return False
          if (i + 1) % 2 == 1 and v == d:
              return False
      return True


  def naive(a, m, d):
      return [i for i in range(a + 1) if i % m == 0 and is_magic(i, d)]


  def solve(a, m, d):
      digits = list(map(int, str(a)))
      ndigits = len(digits)

      @lru_cache(None)
      def rec(i, smaller, first_digit, even, mod):
          if i == ndigits:
              return 1 if mod == 0 else 0

          ret = 0
          for c in range(10 if smaller else digits[i] + 1):
              if even and c != d:
                  continue
              if not even and c == d:
                  continue

              new_first_digit = False if not first_digit else c == 0
              ret += (
                  rec(
                      i + 1,
                      smaller or c < digits[i],
                      new_first_digit,
                      not even if not new_first_digit else False,
                      (mod * 10 + c) % m,
                  )
                  % MOD
              )
          return ret

      return rec(0, False, True, False, 0)


  def count(m, d, a, b):
      return (solve(b, m, d) - solve(a - 1, m, d) + MOD) % MOD


  # m, d = list(map(int, input().split()))
  # a = int(input())
  # b = int(input())
  # print(count(m, d, a, b))


  # count(2, 6, 10, 99)
  # count(2, 0, 1, 9)
  # count(19, 7, 1000, 9999)
  # count(566, 3, 6372451659957700362854162843720623142601337360014410221724168092176479911659703538545016668832338549, 7969973326176891147525183958122002014921396842270051000646823226374743898663307171214245111949604186)
  count(
      2,
      6,
      0,

  )
#+end_src

#+begin_src python :exports none
  from collections import defaultdict

  MOD = 10**9 + 7

  def is_magic(n, d):
      digits = list(map(int, str(n)))
      for i, v in enumerate(digits):
          if (i + 1) % 2 == 0 and v != d:
              return False
          if (i + 1) % 2 == 1 and v == d:
              return False
      return True


  def naive(a, m, d):
      return [i for i in range(a + 1) if i % m == 0 and is_magic(i, d)]


  def solve(a, m, d):
      digits = list(map(int, str(a)))
      ndigits = len(digits)

      # dp[i][j][k] = the number of d-magic numbers
      #   where i is the length of the prefix magic number
      #         j is the remainder of the prefix magic number modulo m
      #         k is True if the prefix number is already smaller than a
      dp = defaultdict(lambda: defaultdict(lambda: defaultdict(lambda: 0)))
      dp[0][0][False] = 1
      for i in range(ndigits):
          for j in range(m):
              for smaller in [True, False]:
                  for c in range(10 if smaller else digits[i] + 1):
                      if i % 2 == 1 and c != d:
                          continue
                      if i % 2 == 0 and c == d:
                          continue
                      if i == 0 and c == 0:
                          continue
                      ni = i + 1
                      nj = (j * 10 + c) % m
                      nsmaller = smaller or c < digits[i]
                      dp[ni][nj][nsmaller] += dp[i][j][smaller]
                      dp[ni][nj][nsmaller] %= MOD

      ret = 0
      for smaller in [True, False]:
          ret = (ret + dp[ndigits][0][smaller]) % MOD
      return ret


  def count(m, d, a, b):
      return (solve(b, m, d) - solve(a, m, d) + MOD) % MOD

  m, d = list(map(int, input().split()))
  a = int(input())
  b = int(input())
  print(count(m, d, a, b))

  assert count(2, 6, 10, 99) == 8
  assert count(2, 0, 1, 9) == 4
  assert count(19, 7, 1000, 9999) == 6

  # count(566, 3, 6372451659957700362854162843720623142601337360014410221724168092176479911659703538545016668832338549, 7969973326176891147525183958122002014921396842270051000646823226374743898663307171214245111949604186)
  # count(1286, 5, 1886373541983002858974907276497223649072414883083336663541044958378875954171855070620868427474284001, 4050983123791059817478363830631049287126338893626273758612677264947268375965600848751800494833017145)
  # count(
  #     2,
  #     6,


  # )
#+end_src

#+begin_src cpp
  #include <stdio.h>

  int main () {
    int n;
    scanf("%d", &n);
    printf("%d\n", &n);
    return 0;
  }
#+end_src

#+RESULTS:
: -1338382392

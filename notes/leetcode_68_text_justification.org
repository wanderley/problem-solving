:PROPERTIES:
:ID:       1F2EBF73-A90F-4353-B5C7-CCD84462FC0E
:ROAM_REFS: https://leetcode.com/problems/text-justification/
:END:
#+TITLE: Leetcode: 68. Text Justification
#+ROAM_REFS: https://leetcode.com/problems/text-justification/
#+LEETCODE_LEVEL: Hard
#+ANKI_DECK: Problem Solving
#+ANKI_CARD_ID: 1661446016746

[[id:C4FCF1BD-0D05-4D47-8FAB-B6002A8F4F09][Can we solve the problem by iterating from left to right (or right to left)?]]  Process each word from left to right and flush the current line when adding a word to it would exceed the max allowed width.  Time and space complexity is $O(n)$.

#+begin_src python
  from typing import List


  class Solution:
      def fullJustify(self, words: List[str], maxWidth: int) -> List[str]:
          letters_on_line, line = 0, []
          ans = []
          for word in words:
              if letters_on_line + len(line) + len(word) > maxWidth:
                  b = len(line) - 1 if len(line) > 1 else 1
                  l = maxWidth - letters_on_line
                  s, r = l // b, l % b
                  cur = ""
                  for lword in line:
                      if cur:
                          cur += " " * (s + int(r > 0))
                          r -= 1
                      cur += lword
                  ans.append(cur + " " * (maxWidth - len(cur)))
                  letters_on_line, line = 0, []
              letters_on_line += len(word)
              line.append(word)
          if line:
              ans.append(
                  " ".join(line) + " " * (maxWidth - letters_on_line - (len(line) - 1))
              )
          return ans


  assert Solution().fullJustify(
      ["This", "is", "an", "example", "of", "text", "justification."], 16
  ) == ["This    is    an", "example  of text", "justification.  "]
  assert Solution().fullJustify(
      ["What", "must", "be", "acknowledgment", "shall", "be"], 16
  ) == ["What   must   be", "acknowledgment  ", "shall be        "]
  assert Solution().fullJustify(
      [
          "Science",
          "is",
          "what",
          "we",
          "understand",
          "well",
          "enough",
          "to",
          "explain",
          "to",
          "a",
          "computer.",
          "Art",
          "is",
          "everything",
          "else",
          "we",
          "do",
      ],
      20,
  ) == [
      "Science  is  what we",
      "understand      well",
      "enough to explain to",
      "a  computer.  Art is",
      "everything  else  we",
      "do                  ",
  ]
#+end_src

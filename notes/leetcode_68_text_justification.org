:PROPERTIES:
:ID:       1F2EBF73-A90F-4353-B5C7-CCD84462FC0E
:ROAM_REFS: https://leetcode.com/problems/text-justification/
:END:
#+TITLE: Leetcode: 68. Text Justification
#+ROAM_REFS: https://leetcode.com/problems/text-justification/
#+LEETCODE_LEVEL: Hard
#+ANKI_DECK: Problem Solving
#+ANKI_CARD_ID: 1661446016746

* Patterns

- [[id:2AA9CA31-5C60-4702-87E8-4441D9C4AF61][Pattern: Simulation problem]].

- [[id:82697515-9F9A-4CAF-83D5-00665332E4AD][Pattern: Problem has a greedy property]].

* Prompts

- [[id:C4FCF1BD-0D05-4D47-8FAB-B6002A8F4F09][Can we solve the problem by iterating from left to right (or right to left)?]]

- [[id:46522C06-DAC3-4986-A13A-17C2ED44ADD1][Can we formulate the problem as sliding window?]]

* Solution

The solution consists on simulating the rules that are describes in the problem statement.  Pack as much words possible while distributing them evenly.  The trick part becomes how to implement it in a clear and concise way.  All that we need are two values to decide when to flush or extend a line: number of words and total number of chars to be flushed.  If these values, we can determine if the line exceeded the max length and compute the number of spaces required when flushing the line.  Time complexity and space are $O(n)$.

#+begin_src python
  from typing import List


  class Solution:
      def fullJustify(self, words: List[str], maxWidth: int) -> List[str]:
          letters_on_line, line = 0, []
          ans = []
          for word in words:
              if letters_on_line + len(line) + len(word) > maxWidth:
                  b = len(line) - 1 if len(line) > 1 else 1
                  l = maxWidth - letters_on_line
                  s, r = l // b, l % b
                  cur = ""
                  for lword in line:
                      if cur:
                          cur += " " * (s + int(r > 0))
                          r -= 1
                      cur += lword
                  ans.append(cur + " " * (maxWidth - len(cur)))
                  letters_on_line, line = 0, []
              letters_on_line += len(word)
              line.append(word)
          if line:
              ans.append(
                  " ".join(line) + " " * (maxWidth - letters_on_line - (len(line) - 1))
              )
          return ans


  assert Solution().fullJustify(
      ["This", "is", "an", "example", "of", "text", "justification."], 16
  ) == ["This    is    an", "example  of text", "justification.  "]
  assert Solution().fullJustify(
      ["What", "must", "be", "acknowledgment", "shall", "be"], 16
  ) == ["What   must   be", "acknowledgment  ", "shall be        "]
  assert Solution().fullJustify(
      [
          "Science",
          "is",
          "what",
          "we",
          "understand",
          "well",
          "enough",
          "to",
          "explain",
          "to",
          "a",
          "computer.",
          "Art",
          "is",
          "everything",
          "else",
          "we",
          "do",
      ],
      20,
  ) == [
      "Science  is  what we",
      "understand      well",
      "enough to explain to",
      "a  computer.  Art is",
      "everything  else  we",
      "do                  ",
  ]
#+end_src

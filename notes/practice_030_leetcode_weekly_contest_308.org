:PROPERTIES:
:ID:       2F74800F-DA6D-4C63-91E7-6FFB99CFB870
:END:
#+TITLE: Practice #030: Leetcode Weekly Contest 308

* Leetcode: 2389. Longest Subsequence With Limited Sum
:PROPERTIES:
:ID:       CA1E8C30-A3CF-4020-95D6-6E36B8035EFD
:END:
[[https://leetcode.com/problems/longest-subsequence-with-limited-sum/][Problem Statement]]

- Category :: [[id:1217FC3D-A9F9-49EC-BA5D-A68E50338DBD][Binary Search]]

#+begin_src python
  from typing import List
  from itertools import accumulate
  from bisect import bisect_right


  class Solution:
      def answerQueries(self, nums: List[int], queries: List[int]) -> List[int]:
          nums.sort()
          p = list(accumulate(nums))
          return [bisect_right(p, q) for q in queries]


  assert Solution().answerQueries([4, 5, 2, 1], [3, 10, 21]) == [2, 3, 4]
  assert Solution().answerQueries([2, 3, 4, 5], [1]) == [0]
#+end_src

* Leetcode: 2390. Removing Stars From a String
:PROPERTIES:
:ID:       334BCAB7-0873-43D2-ACA2-55D8673DC2FD
:END:
[[https://leetcode.com/problems/removing-stars-from-a-string/][Problem Statement]]

- Category :: [[id:06D27BC1-DFDC-4063-B3A9-7074FD5E13B3][Stack]]

#+begin_src python
  class Solution:
      def removeStars(self, s: str) -> str:
          st = []
          for c in s:
              if c == "*":
                  st.pop()
              else:
                  st.append(c)
          return "".join(st)


  assert Solution().removeStars("leet**cod*e") == "lecoe"
  assert Solution().removeStars("erase*****") == ""
#+end_src

* Leetcode: 2391. Minimum Amount of Time to Collect Garbage
:PROPERTIES:
:ID:       44CE4CC9-821A-4BC5-A123-B47BAED8C86F
:END:
[[https://leetcode.com/problems/minimum-amount-of-time-to-collect-garbage/][Problem Statement]]

#+begin_src python
  from typing import List
  from itertools import accumulate
  from collections import defaultdict


  class Solution:
      def garbageCollection(self, garbage: List[str], travel: List[int]) -> int:
          ans = 0
          d = defaultdict(int)
          p = list(accumulate([0] + travel))
          for j, g in enumerate(garbage):
              ans += len(g)
              for i in g:
                  d[i] = max(d[i], j)
          ans += sum(p[i] for i in d.values())
          return ans


  assert Solution().garbageCollection(["G", "P", "GP", "GG"], [2, 4, 3]) == 21
  assert Solution().garbageCollection(["MMM", "PGM", "GP"], [3, 10]) == 37
#+end_src

* Leetcode: 2392. Build a Matrix With Conditions
:PROPERTIES:
:ID:       BFFF04B8-FDA3-416C-AA58-96EB32EC1EEF
:END:
[[https://leetcode.com/problems/build-a-matrix-with-conditions/][Problem Statement]]

- [[id:64E7E55B-09A9-4022-AB5E-1D25FC64EAC9][Is there an alternative problem easier to solve?]]  Build two graphs for rows and columns conditions where each condition is an edge between two numbers from $1$ to $k$.  The problem becomes finding the [[id:80122A2F-3B84-48B1-B10D-6ACEE4373298][Topological Sort]] of these two graphs and filled the final matrix with it.  Time and space complexity are $O(n)$.

#+begin_src python
  from typing import List


  class Solution:
      def topological_sort(self, graph):
          NOT_VISITED = 1
          OPEN = 2
          CLOSED = 4

          status = {u: NOT_VISITED for u in graph}
          ans = []

          def dfs(u):
              if status[u] == CLOSED:
                  return True
              if status[u] == OPEN:
                  return False

              status[u] = OPEN
              for v in graph[u]:
                  if not dfs(v):
                      return False

              ans.append(u)
              status[u] = CLOSED
              return True

          for c in status:
              if status[c] == NOT_VISITED:
                  if not dfs(c):
                      return False

          ans.reverse()
          return ans

      def buildMatrix(
          self, k: int, rowConditions: List[List[int]], colConditions: List[List[int]]
      ) -> List[List[int]]:
          def build_graph(edges):
              A = {i: [] for i in range(1, k + 1)}
              for u, v in edges:
                  A[u].append(v)
              return A

          r = self.topological_sort(build_graph(rowConditions))
          c = self.topological_sort(build_graph(colConditions))
          if not r or not c:
              return []

          ans = [[0] * k for _ in range(k)]
          for e in range(1, k + 1):
              if e in r and e in c:
                  ans[r.index(e)][c.index(e)] = e
          return ans


  assert Solution().buildMatrix(3, [[1, 2], [3, 2]], [[2, 1], [3, 2]]) == [
      [3, 0, 0],
      [0, 0, 1],
      [0, 2, 0],
  ]
  assert Solution().buildMatrix(3, [[1, 2], [2, 3], [3, 1], [2, 3]], [[2, 1]]) == []
#+end_src

:PROPERTIES:
:ID:       2F0C81A4-4B76-4512-BC1A-9FF535D93660
:ROAM_REFS: https://leetcode.com/problems/employee-free-time/
:END:
#+TITLE: Leetcode: 759. Employee Free Time
#+ROAM_REFS: https://leetcode.com/problems/employee-free-time/
#+LEETCODE_LEVEL: Hard
#+ANKI_DECK: Problem Solving
#+ANKI_CARD_ID: 1661446118165

- [[id:37AF9679-42D1-4A85-9927-2A590268AD87][Blackbox: You solved a similar problem]] with intervals where you used a [[id:06D27BC1-DFDC-4063-B3A9-7074FD5E13B3][Stack]] to compute the answer, and I solved a problem to create a sorted list from a list of sorted lists ([[id:02D2E665-4FC5-45C7-A1BF-E7CE82E67B05][Leetcode: 23. Merge k Sorted Lists]]).

- [[id:42B21DBC-4951-4AF2-8C41-A646F5675365][Can we pre-process the input in a way to make easy to solve the problem?]]  We can create a list of all intervals sorted by start time.  This will help us to process all of them as they come.

- [[id:45B9F3C8-D007-4980-95EF-4361906245A8][How can we extend the solution for $i$ to $i+1$?]]  Be $a$ an array with all intervals sorted by start time.  We know that if there is a time off, it will definitely start after $a[0].end$.  If $a[1].start > a[0].end$, then there is a time off from $(a[0].end, a[1].start)$.  If $a[1].start \leq a[0].end$, then the time off might start at $\max(a[0].end, a[1].end)$.  This property holds for all intervals.  Therefore, we can keep a variable with the last end time and use it to create a new interval if needed or update it.  Time complexity is $O(n \log m)$ where $m$ is the total number of intervals, because we use a [[id:FCBEA48C-CFF6-43C4-B430-BCD00E245D22][Priority-Queue]] to get the next interval sorted by start time.  Space complexity is $O(m)$.

#+begin_src python
  """
  # Definition for an Interval.
  class Interval:
      def __init__(self, start: int = None, end: int = None):
          self.start = start
          self.end = end
  """


  class Solution:
      def employeeFreeTime(self, schedule: "[[Interval]]") -> "[Interval]":
          last = None
          ans = []
          for i in merge(*schedule, key=lambda i: (i.start, i.end)):
              if last is None:
                  last = i.end
              elif i.start <= last:
                  last = max(last, i.end)
              else:
                  ans.append(Interval(last, i.start))
                  last = i.end
          return ans
#+end_src

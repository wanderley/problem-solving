:PROPERTIES:
:ID:       709B45CD-4F19-41EF-9334-12DE17775715
:ROAM_REFS: https://leetcode.com/problems/find-all-people-with-secret/
:END:
#+TITLE: Leetcode: 2092. Find All People With Secret
#+ROAM_REFS: https://leetcode.com/problems/find-all-people-with-secret/
#+LEETCODE_LEVEL: Hard
#+ANKI_DECK: Problem Solving

- [[id:DA951820-DBB5-4A7F-9401-DF5860EFAB8A][Mistake: Incorrect evaluation of solution's viability]].  I computed the connections to person ~0~, by looking to the edges that starts on person ~0~ component.  The problem is that it will become $O(n^2)$ in the worst case and not $O(m)$.

- [[id:49FB2683-60E5-4B10-B2B7-1D0B951EA1E0][Pattern: Build graph online]].  For each meeting time, we add all edges using [[id:23A4E36E-24D3-40F8-AA20-32C0DB1E36F6][Union-Find]] from the meetings to the graph and after that we remove all those edges which its vertices aren't connected to the vertex 0.

- [[id:45B9F3C8-D007-4980-95EF-4361906245A8][How can we extend the solution for $i$ to $i+1$?]]  We are going to build the solution by time.  Group all meetings by their times.  From the earlier to the later meeting, connect the vertices (people) that met at that time.  On the end, reset the connected components other the one that has people ~0~ on it.  Time complexity is $O(m)$ and space is $O(n)$.

#+begin_src python
  from typing import List


  class Solution:
      def findAllPeople(
          self, n: int, meetings: List[List[int]], firstPerson: int
      ) -> List[int]:
          p = [i for i in range(n)]

          def find(u):
              if p[u] != u:
                  p[u] = find(p[u])
              return p[u]

          def union(u, v):
              p[find(u)] = p[find(v)]

          union(0, firstPerson)

          m = {t: [] for _, _, t in meetings}
          for u, v, t in meetings:
              m[t].append((u, v))

          for t in sorted(m):
              vs = set()
              for u, v in m[t]:
                  union(u, v)
                  vs.add(u)
                  vs.add(v)
              for u in vs:
                  if find(u) != find(0):
                      p[u] = u

          return [u for u in range(n) if find(u) == find(0)]


  assert Solution().findAllPeople(6, [[1, 2, 5], [2, 3, 8], [1, 5, 10]], 1) == [
      0,
      1,
      2,
      3,
      5,
  ]
  assert Solution().findAllPeople(4, [[3, 1, 3], [1, 2, 2], [0, 3, 3]], 3) == [0, 1, 3]
  assert Solution().findAllPeople(5, [[3, 4, 2], [1, 2, 1], [2, 3, 1]], 1) == [
      0,
      1,
      2,
      3,
      4,
  ]
#+end_src

:PROPERTIES:
:ID:       593E4F24-073D-4528-BDFB-D2CC3D024723
:END:
#+TITLE: Leetcode: 907. Sum of Subarray Minimums

[[https://leetcode.com/problems/sum-of-subarray-minimums/][Problem Statement]]: Given an array of integers $a$, return the sum of $min(b)$ where $b$ is an interval of $a$.

Suppose that we have $n(i)$ and $p(i)$ defined as the index of the [[id:135D43F0-78FA-43E4-821F-509439B633D1][next smaller]] and [[id:C9A1DCE9-FFE5-498A-9A04-07B71ABDEFCD][previous smaller]] of $a[i]$.  Having these numbers, we can easily compute the number of intervals of $a$ where $a[i]$: $n(i) \times p(i)$.

- Time complexity: $O(|a|)$.
- Space complexity: $O(|a|)$.

#+begin_src python
  from typing import List
  from collections import deque


  def next_smaller(nums):
      ans = [-1] * len(nums)
      st = deque(maxlen=len(nums))
      for i, x in enumerate(nums):
          while len(st) > 0 and nums[st[-1]] > x:
              ans[st.pop()] = i
          st.append(i)
      return ans


  assert next_smaller([3, 2, 5, 4, 9]) == [1, -1, 3, -1, -1]


  def prev_smaller(nums):
      ans = [-1] * len(nums)
      st = deque(maxlen=len(nums))
      for i, x in enumerate(nums):
          while len(st) > 0 and nums[st[-1]] > x:
              st.pop()
          ans[i] = -1 if len(st) == 0 else st[-1]
          st.append(i)
      return ans


  assert prev_smaller([10, 2, 5, 4, 9]) == [-1, -1, 1, 1, 3]


  def solve(nums):
      n = next_smaller(nums)
      p = prev_smaller(nums)
      ans = 0
      for i in range(len(nums)):
          l = i - p[i]
          r = (len(nums) if n[i] == -1 else n[i]) - i
          assert l >= 0
          assert r >= 0
          c = nums[i] * (l * r)
          ans = (ans + c) % (10**9 + 7)
      return ans


  assert solve([3, 1, 2, 4]) == 17
  assert solve([11, 81, 94, 43, 3]) == 444


  class Solution:
      def sumSubarrayMins(self, arr: List[int]) -> int:
          return solve(arr)
#+end_src

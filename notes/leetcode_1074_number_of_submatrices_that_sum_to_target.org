:PROPERTIES:
:ID:       B6168144-12D5-49C7-A8E1-1258C977715C
:ROAM_REFS: https://leetcode.com/problems/number-of-submatrices-that-sum-to-target/
:END:
#+TITLE: Leetcode: 1074. Number of Submatrices That Sum to Target
#+ROAM_REFS: https://leetcode.com/problems/number-of-submatrices-that-sum-to-target/
#+LEETCODE_LEVEL: Hard
#+ANKI_DECK: Problem Solving

- [[id:AC9291C6-4C72-4143-80F2-0D414EF7B681][Mistake: Did not try hard to solve alternative problem]].  I saw the transformation but couldn't see the linear solution for it.

- [[id:64E7E55B-09A9-4022-AB5E-1D25FC64EAC9][Is there an alternative problem easier to solve?]]  Given an array of numbers and a target $t$, find the number of subarrays which sum is equal to $t$.  Be $p[i]=\sum_{0 \leq j \leq i}a[j]$.  The number of valid subarrays ending on $i$ is the number of times that $p[i]-target$ appeared in $p[0..(i-1)]$ plus 1 if $p[i]=t$.  We can transform the 2D problem in the 1D by keeping an accumulated sum for each column and creating the array of numbers after fixing two rows $i0$ and $i0$.  Time complexity is $O(n^2 \times m)$ and space complexity is $O(n \times m)$.

#+begin_src python
  from typing import List
  from collections import defaultdict


  class Solution:
      def numSubmatrixSumTarget(self, m: List[List[int]], target: int) -> int:
          N = len(m)
          M = len(m[0])

          csum = [[0] * M for _ in range(N)]
          for i in range(N):
              for j in range(M):
                  csum[i][j] = m[i][j]
                  if i > 0:
                      csum[i][j] += csum[i - 1][j]
          ans = 0
          for i0 in range(N):
              for i1 in range(i0, N):
                  freq = defaultdict(int)
                  cur = 0
                  for j in range(M):
                      cur += csum[i1][j]
                      if i0 > 0:
                          cur -= csum[i0 - 1][j]
                      ans += freq[cur - target]
                      if cur == target:
                          ans += 1
                      freq[cur] += 1
          return ans


  assert Solution().numSubmatrixSumTarget([[0, 1, 0], [1, 1, 1], [0, 1, 0]], 0) == 4
  assert Solution().numSubmatrixSumTarget([[1, -1], [-1, 1]], 0) == 5
  assert Solution().numSubmatrixSumTarget([[904]], 0) == 0
#+end_src

:PROPERTIES:
:ID:       823DBEC0-6414-4F5B-8F6E-F6EB20C7DB03
:ROAM_REFS: https://leetcode.com/problems/count-of-smaller-numbers-after-self/
:END:
#+TITLE: Leetcode: 315. Count of Smaller Numbers After Self
#+ROAM_REFS: https://leetcode.com/problems/count-of-smaller-numbers-after-self/
#+LEETCODE_LEVEL: Hard
#+ANKI_DECK: Problem Solving

- [[id:A18543C4-83BC-40F1-A243-B85FD935FAC0][Pattern: Answer query on sorted data]].

- [[id:69D68202-BF1A-4D72-A0EC-DDCBAF112500][Can we break-down the problem in small and easily to solve parts?]]  Suppose we are processing the element $i$ from right to left, if we keep element $nums[i+1,...,n-1]$ sorted, the problem becomes finding the right-most index where we could add $nums[i]$ to the sorted list while keeping it sorted.  Time complexity is $O(n \log n)$ and space is $O(n)$.

#+begin_src python
  from typing import List
  from sortedcontainers import SortedList


  class Solution:
      def countSmaller(self, nums: List[int]) -> List[int]:
          right = SortedList([])
          N = len(nums)
          ans = [0] * N
          for i in range(N - 1, -1, -1):
              j = right.bisect_left(nums[i])
              ans[i] = j
              right.add(nums[i])
          return ans


  assert Solution().countSmaller([5, 2, 6, 1]) == [2, 1, 1, 0]
  assert Solution().countSmaller([-1]) == [0]
  assert Solution().countSmaller([-1, -1]) == [0, 0]
#+end_src

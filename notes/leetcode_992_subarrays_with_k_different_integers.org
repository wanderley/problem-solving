:PROPERTIES:
:ID:       76D09A86-8395-47B6-BF53-67D6E7F79A50
:ROAM_REFS: https://leetcode.com/problems/subarrays-with-k-different-integers/
:END:
#+TITLE: Leetcode: 992. Subarrays with K Different Integers
#+ROAM_REFS: https://leetcode.com/problems/subarrays-with-k-different-integers/
#+LEETCODE_LEVEL: Hard
#+ANKI_DECK: Problem Solving

- [[id:64E7E55B-09A9-4022-AB5E-1D25FC64EAC9][Is there an alternative problem easier to solve?]]  Compute $c(x)$ which is the number of arrays with at most $x$ distinct elements.  The answer for the original problem is $c(k) - c(k-1)$.  Time and space complexity is $O(N)$.

#+begin_src python
  from typing import List


  class Solution:
      def subarraysWithKDistinct(self, nums: List[int], k: int) -> int:
          N = len(nums)

          def calc(k):
              c = [0] * (N + 1)
              j = d = ans = 0
              for i in range(N):
                  c[nums[i]] += 1
                  d += 1 if c[nums[i]] == 1 else 0
                  while d > k:
                      c[nums[j]] -= 1
                      d -= 1 if c[nums[j]] == 0 else 0
                      j += 1
                  ans += i - j + 1
              return ans

          return calc(k) - calc(k - 1)


  assert Solution().subarraysWithKDistinct([1, 2, 1, 2, 3], 2) == 7
  assert Solution().subarraysWithKDistinct([1, 2, 1, 3, 4], 3) == 3
#+end_src

:PROPERTIES:
:ID:       76B022D8-9C12-4415-AFDD-837067EC49DD
:END:
#+TITLE: Leetcode: 1284. Minimum Number of Flips to Convert Binary Matrix to Zero Matrix
#+ROAM_REFS: https://leetcode.com/problems/minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix/
#+ANKI_DECK: Problem Solving
#+ANKI_CARD_ID: 1661446057132
#+LEETCODE_LEVEL: Hard

* Understand the problem

Modeling as graph problem, the problem is to [[id:3283AA3B-67CD-4F8E-960E-442AAE3FD7DC][Pattern: Find shortest path between two vertices in a graph]].  A binary matrix is a vertex and two binary matrices are connected if you can flip one of it's cells and get from one to the other.  There are at most $2^{n \times m }= 2^9 = 512$ vertices with 4 edges ending on each one of them.

** Useful prompts

- [[id:DA1E3A63-73BB-475E-B087-128602B13450][Can we formulate the problem using graphs?]]

- [[id:1CFF662A-6F16-43CE-BB07-EA12BA382690][Can we formulate the problem as a classical problem?]]

* Devise a plan (1)

A [[id:AF8E855B-7F09-4A2C-BA75-DBA1FFEEF56F][Breadth-first search]] from the given binary matrix to the zero matrix is enough to solve the problem, since there are no costs associated to the edges.  Time and space complexity are $O(2^{n \times m})$, given that the [[id:C767BE5B-4E2C-44F9-8410-F4E920DCFCBC][Pattern: Small constraints]] allows the representation of the binary matrix using at most $3 \times 3$ bits.

** Carry out the plan

#+begin_src python
  from typing import List


  class Solution:
      def minFlips(self, mat: List[List[int]]) -> int:
          N = len(mat)
          M = len(mat[0])

          def id(i, j):
              return 1 << (i * M + j)

          initial = 0
          for i in range(N):
              for j in range(M):
                  if mat[i][j] == 1:
                      initial = initial | id(i, j)

          seen = set()
          queue = [(0, initial)]

          for steps, state in queue:
              if state == 0:
                  return steps
              if state in seen:
                  continue
              seen.add(state)

              for i in range(N):
                  for j in range(M):
                      nstate = state
                      for di, dj in [[+0, +0], [+0, +1], [+0, -1], [+1, +0], [-1, +0]]:
                          if 0 <= di + i < N and 0 <= dj + j < M:
                              if nstate & id(di + i, dj + j) != 0:
                                  nstate = nstate & ~id(di + i, dj + j)
                              else:
                                  nstate = nstate | id(di + i, dj + j)
                      queue.append((steps + 1, nstate))
          return -1


  assert Solution().minFlips([[0, 0], [0, 1]]) == 3
  assert Solution().minFlips([[0]]) == 0
  assert Solution().minFlips([[1, 0, 0], [1, 0, 0]]) == -1
#+end_src

* Devise a plan (2)

A [[id:212DBFC3-FE3C-493E-86A6-42FF3F82CD53][Depth-first search]] can be used to search the minimum number of flips given an instance $(m, i, j)$ of the problem where $m$ is a binary matrix, and $i,j$ is a cell position.  *Optimization:* We don't need to flip all cells but only cells on the first row or ones that will make the above cell a zero (inspired on [[https://leetcode.com/problems/minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix/discuss/447012/O(2-mn)][StefanPochamann's solution]]).  There are $O(2^{n \times m} \times n \times m)$ with $5$ possible transitions ([[id:C767BE5B-4E2C-44F9-8410-F4E920DCFCBC][Pattern: Small constraints]]).

** Carry out the plan

#+begin_src python
  class Solution:
      def minFlips(self, mat: List[List[int]]) -> int:
          N = len(mat)
          M = len(mat[0])
          D = [[+1, +0], [-1, +0], [+0, +1], [+0, -1]]
          S = 0

          bit = lambda i, j: 1 << (i * M + j)
          flip = lambda state, i, j: state | bit(i, j) if state & bit(i, j) == 0 else state & ~bit(i, j)

          for i in range(N):
              for j in range(M):
                  if mat[i][j] == 1:
                      S = flip(S, i, j)

          def dfs(state, i, j):
              if i == N:
                  return 0 if state == 0 else float("inf")
              if j == M:
                  return dfs(state, i + 1, 0)
              ans = dfs(state, i, j + 1)
              nstate = flip(state, i, j)
              for di, dj in D:
                  ni, nj = i + di, j + dj
                  if 0 <= ni < N and 0 <= nj < M:
                      nstate = flip(nstate, ni, nj)
              if i == 0 or bit(i - 1, j):
                  ans = min(ans, 1 + dfs(nstate, i, j + 1))
              return ans

          ans = dfs(S, 0, 0)
          return -1 if ans == float("inf") else ans
#+end_src

* Common mistakes

- [[id:192401C2-DA6F-4496-B530-89A3546712FD][Mistake: Misread the problem]]: Missed that I could also flip cells with 0.

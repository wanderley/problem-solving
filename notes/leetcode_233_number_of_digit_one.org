:PROPERTIES:
:ID:       A8662EF5-8181-4F3E-901D-932F8B672676
:END:
#+TITLE: Leetcode: 233. Number of Digit One

[[id:153A8411-5A07-478C-BD5F-562FE777012D][@WIP]]

First idea consists on counting the number of 1's in all possible inputs and answer the queries in $O(1)$.  As $0 \leq p \leq 10^9$, we would need $10^9 \times 32$ bits or $120$ megabytes just to store the count and the algorithm would have time complexity of $O(9n) = O(9 \times 10^9)$ what is too slow.

Let's explore the fact that any given input will be a number with at most 9 digits.  Be $c(p)$ the total number of digit 1 appearing in all non-negative integers less than or equal to $n$. Take $n=12345$ as example.  It has 5 digits.  What do we know about numbers with less than 5 digits?  Be $d(p)$ the total number of digit 1 appearing in all non-negative integers *with exactly $p$ digits*.  If *the first digit (left-most digit) is 1*, then there are 10 values (0-9) for each of the other digits.  If *the first digit is not 1*, then there are $\tbinom{p}{q}$ ways to have $q$ 1-digits in the integer and $9^{p-q}$ values for the remainder $(p-q)$ digits.  So, $d(p)=10^{p-1}+\sum_{1\leq q \leq p}\tbinom{p}{q} \times 9^{p-q}$.

#+begin_src python :exports none
  from functools import cache


  def naive(n):
      ret = 0
      for i in range(n + 1):
          while i > 0:
              ret += 1 if i % 10 == 1 else 0
              i = i // 10
      return ret


  @cache
  def factorial(n):
      return 1 if n <= 0 else n * factorial(n - 1)


  @cache
  def choose(p, q):
      return factorial(p) // (factorial(p - q) * factorial(q))


  @cache
  def d(p):
      if p < 1:
          return 0
      ret = 0
      for q in range(1, p):
          ret += q * choose(p - 1, q) * (9 ** (p - q))
      return ret + 10 ** (p - 1)


  assert d(2) == naive(99) - naive(9) == 19
  assert d(5) == naive(99999) - naive(9999) == 46000
#+end_src

* TODO Explain the usage of [[id:4EABECD0-AEDD-4A57-8902-67F2BC6673AC][Dynamic Programming by Digit]] to solve the problem

#+begin_src python :exports none
  def c(n):
      def digits_to_int(ds):
          if ds == []:
              return 0
          return int("".join(map(str, ds)))

      digits = [*map(int, str(n))]
      K = len(digits)

      @cache
      def rec(i, count, already_smaller):
          if i == K:
              return count
          ret = 0
          for j in range(10 if already_smaller else digits[i] + 1):
              ret = ret + rec(
                  i + 1,
                  count + (1 if j == 1 else 0),
                  True if already_smaller or j < digits[i] else False
              )
          return ret

      return rec(0, 0, False)


  class Solution:
    def countDigitOne(self, n: int) -> int:
        return c(n)

  assert Solution().countDigitOne(13) == 6
  assert Solution().countDigitOne(99999) == 50000
  assert Solution().countDigitOne(123) == 57
#+end_src

#+RESULTS:
| 57 | 37 | 36 |

* Building blocks

- [[id:D115096E-9F04-4A70-BB5F-30FE4977F266][Factorial]]
- [[id:B0399413-0375-4F60-85DA-CF98482CFF02][Binomial coefficient]]

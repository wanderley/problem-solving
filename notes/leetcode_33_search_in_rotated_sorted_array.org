:PROPERTIES:
:ID:       DE8C7F14-D36F-43BF-8AF1-B6940406EBF6
:ROAM_REFS: https://leetcode.com/problems/search-in-rotated-sorted-array/
:END:
#+TITLE: Leetcode: 33. Search in Rotated Sorted Array
#+ROAM_REFS: https://leetcode.com/problems/search-in-rotated-sorted-array/
#+LEETCODE_LEVEL: Medium
#+ANKI_DECK: Problem Solving

[[id:C65814C2-1833-4599-8443-AD0F94C8AA22][How can we decided which side to continue searching using the problem's constraints?]]  Be $m$ an index on the array.  If $nums[m] > target$, then $nums[n-1]<nums[0]$ and $target$ will be in $nums[(m+1)...(n-1)]$ if $target \leq nums[n-1]$, otherwise it might be on $nums[0...(m-1)]$. By the other hand, if $nums[m] < target$, then $target$ will be on $nums[0..(m-1)]$ if $target > nums[n-1]$, else it will be on $nums[(m+1)...(n-1)]$.  Time complexity is $O(\log n)$ and space is $O(1).

#+begin_src python
  from typing import List


  class Solution:
      def search(self, nums: List[int], target: int) -> int:
          n = len(nums)
          s = 0
          e = n - 1
          while s <= e:
              m = s + (e - s) // 2
              if nums[m] == target:
                  return m
              elif nums[m] > target:
                  if nums[m] > nums[-1] and target <= nums[-1]:
                      s = m + 1
                  else:
                      e = m - 1
              else:
                  if nums[m] < nums[-1] and target > nums[-1]:
                      e = m - 1
                  else:
                      s = m + 1
          return -1


  assert Solution().search([4, 5, 6, 7, 0, 1, 2], 0) == 4
  assert Solution().search([4, 5, 6, 7, 0, 1, 2], 3) == -1
  assert Solution().search([1], 0) == -1
#+end_src

from functools import lru_cache

MOD = 10**9 + 7


def is_magic(n, d):
    digits = list(map(int, str(n)))
    for i, v in enumerate(digits):
        if (i + 1) % 2 == 0 and v != d:
            return False
        if (i + 1) % 2 == 1 and v == d:
            return False
    return True


def naive(a, m, d):
    return [i for i in range(a + 1) if i % m == 0 and is_magic(i, d)]


def solve(a, m, d):
    digits = list(map(int, str(a)))
    ndigits = len(digits)

    @lru_cache(None)
    def rec(i, smaller, first_digit, even, mod):
        if i == ndigits:
            return 1 if mod == 0 else 0

        ret = 0
        for c in range(10 if smaller else digits[i] + 1):
            if even and c != d:
                continue
            if not even and c == d:
                continue

            new_first_digit = False if not first_digit else c == 0
            ret += (
                rec(
                    i + 1,
                    smaller or c < digits[i],
                    new_first_digit,
                    not even if not new_first_digit else False,
                    (mod * 10 + c) % m,
                )
                % MOD
            )
        return ret

    return rec(0, False, True, False, 0)


def count(m, d, a, b):
    return (solve(b, m, d) - solve(a - 1, m, d) + MOD) % MOD


# m, d = list(map(int, input().split()))
# a = int(input())
# b = int(input())
# print(count(m, d, a, b))


# count(2, 6, 10, 99)
# count(2, 0, 1, 9)
# count(19, 7, 1000, 9999)
# count(566, 3, 6372451659957700362854162843720623142601337360014410221724168092176479911659703538545016668832338549, 7969973326176891147525183958122002014921396842270051000646823226374743898663307171214245111949604186)
count(
    2,
    6,
    0,

)

:PROPERTIES:
:ID:       E4CFDB04-DCFD-47E3-9ED2-0DC6446420B5
:END:
#+TITLE: Monotonic Stack

Monotonic Stack is a stack where all elements from bottom to top are in increase or decrease other.  In a Mono-decrease stack has the smaller element on the top and the greater on the bottom.  The reverse is true for a Mono-increase stack.

[[file:assets/2022-06-11_11-32-49_screenshot.png]]

In the classic game Hanoi Tower, the player needs to move discs from one pin to other without putting a bigger disc on top of a smaller one.  The towers are Mono-decrease stacks.

* Problem: Next greater integer in unsorted array
:PROPERTIES:
:ID:       E4C9A18D-FC2B-4C1D-A040-1A94C39F9F63
:END:

Given array $a$ with $n$ integers, return an array $r$ where $r[i]=j$ is the smallest value such that $a[j] > a[i]$ and $j>i$, or $r[i]=-1$ if there is no such $j$.

- Time complexity: $O(n)$
- Space complexity: $O(n)$

#+begin_src python
  from collections import deque


  def next_greater(a):
        ans = [-1] * len(a)
        stack = deque(maxlen=len(a))
        for i, x in enumerate(a):
              while len(stack) > 0 and a[stack[-1]] < x:
                    ans[stack[-1]] = i
                    stack.pop()
              stack.append(i)
        return ans


  assert next_greater([1]) == [-1]
  assert next_greater([1, 2, 3]) == [ 1,  2, -1]
  assert next_greater([1, 3, 2]) == [ 1, -1, -1]
  assert next_greater([3, 2, 1]) == [-1, -1, -1]
  assert next_greater([3, 1, 2]) == [-1,  2, -1]
#+end_src

* Problem: Next smaller in unsorted array
:PROPERTIES:
:ID:       135D43F0-78FA-43E4-821F-509439B633D1
:END:

Given array $a$ with $n$ integers, return an array $r$ where $r[i]=j$ is the smallest value such that $a[j] < a[i]$ and $j>i$, or $r[i]=-1$ if there is no such $j$.

- Time complexity: $O(n)$
- Space complexity: $O(n)$

#+begin_src python
  from collections import deque


  def next_smaller(a):
        ans = [-1] * len(a)
        stack = deque(maxlen=len(a))
        for i, x in enumerate(a):
              while len(stack) > 0 and a[stack[-1]] > x:
                    ans[stack[-1]] = i
                    stack.pop()
              stack.append(i)
        return ans


  assert next_smaller([1]) == [-1]
  assert next_smaller([1, 2, 3]) == [-1, -1, -1]
  assert next_smaller([1, 3, 2]) == [-1,  2, -1]
  assert next_smaller([3, 2, 1]) == [ 1,  2, -1]
  assert next_smaller([3, 1, 2]) == [ 1, -1, -1]
#+end_src

* Problem: Previous greater integer in unsorted array
:PROPERTIES:
:ID:       9F9827A4-93A9-43AF-8E45-673A1A315E44
:END:

Given array $a$ with $n$ integers, return an array $r$ where $r[i]=j$ is the greatest value such that $a[j] > a[i]$ and $j<i$, or $r[i]=-1$ if there is no such $j$.

- Time complexity: $O(n)$
- Space complexity: $O(n)$

#+begin_src python
  from collections import deque


  def prev_greater(a):
      ans = [-1] * len(a)
      stack = deque(maxlen=len(a))
      for i, x in enumerate(a):
          while len(stack) > 0 and a[stack[-1]] < x:
              stack.pop()
          ans[i] = -1 if len(stack) == 0 else stack[-1]
          stack.append(i)
      return ans


  assert prev_greater([1]) == [-1]
  assert prev_greater([1, 2, 3]) == [-1, -1, -1]
  assert prev_greater([1, 3, 2]) == [-1, -1,  1]
  assert prev_greater([3, 2, 1]) == [-1,  0,  1]
  assert prev_greater([3, 1, 2]) == [-1,  0,  0]
#+end_src

* Problem: Previous smaller integer in unsorted array
:PROPERTIES:
:ID:       C9A1DCE9-FFE5-498A-9A04-07B71ABDEFCD
:END:

Given array $a$ with $n$ integers, return an array $r$ where $r[i]=j$ is the greatest value such that $a[j] < a[i]$ and $j<i$, or $r[i]=-1$ if there is no such $j$.

- Time complexity: $O(n)$
- Space complexity: $O(n)$

#+begin_src python
  from collections import deque


  def prev_smaller(a):
      ans = [-1] * len(a)
      stack = deque(maxlen=len(a))
      for i, x in enumerate(a):
          while len(stack) > 0 and a[stack[-1]] > x:
              stack.pop()
          ans[i] = -1 if len(stack) == 0 else stack[-1]
          stack.append(i)
      return ans


  assert prev_smaller([1]) == [-1]
  assert prev_smaller([1, 2, 3]) == [-1,  0,  1]
  assert prev_smaller([1, 3, 2]) == [-1,  0,  0]
  assert prev_smaller([3, 2, 1]) == [-1, -1, -1]
  assert prev_smaller([3, 1, 2]) == [-1, -1,  1]
#+end_src

* References

- [[https://liuzhenglaichn.gitbook.io/algorithm/monotonic-stack][Monotonic Stack]] by [[https://github.com/lzl124631x][Richard Liu]]

:PROPERTIES:
:ID:       AADF91F1-93A2-4EE8-80A5-A516CA826D0D
:ROAM_REFS: https://leetcode.com/problems/number-of-pairs-satisfying-inequality/
:END:
#+TITLE: Leetcode: 2426. Number of Pairs Satisfying Inequality
#+ROAM_REFS: https://leetcode.com/problems/number-of-pairs-satisfying-inequality/
#+LEETCODE_LEVEL: Hard
#+ANKI_DECK: Problem Solving

- [[id:B0C2170B-0DDA-4E0C-B03A-998F29ABDF97][Pattern: Compute values for all pair in array]].  [[id:F19C9539-EE46-41EE-8DEF-24C3076C6DC2][Can we simplify the problem while keeping it the same?]]  The condition can be stated as $n_1[i]-n_2[i]-diff \leq n_1[j]-n_2[j]$.  [[id:3ECFA6C4-B482-49CA-B8C6-C67DA07B6EAE][Can we state the problem as result of multiple searches?]]  For each position $i$, we search for the smallest $j$ that satisfy the condition.  Time complexity is $O(n \log n)$ and space is $O(n)$.

#+begin_src python
  from sortedcontainers import SortedList
  from typing import List

  class Solution:
      def numberOfPairs(self, nums1: List[int], nums2: List[int], diff: int) -> int:
          N = len(nums1)
          s = SortedList()
          ans = 0
          for i in range(N - 1, -1, -1):
              ans += len(s) - s.bisect_left(nums1[i] - nums2[i] - diff)
              s.add(nums1[i] - nums2[i])
          return ans
#+end_src
